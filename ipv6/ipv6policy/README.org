* Handling ipv6 is a PITA.

I'd like a network to boot and run with IPv6 on the getgo. Everyone
is focused on having global connectivity, I'm interested in 
having my own network, just work, even when the internet is down.

Additionally I'd like to just plug in a given router and 
have it automagically add itself to the mesh.

The only good way to do this is randomly create an ipv6 address
range, then assign interfaces sanely to it with short lifetimes.

Then, make sure they are blocked on egress to the internet

example address fdfe:dcba:9876::/48

* Deriving a prefix with RFC4193

  Lacking correct time step one is stupid. 

     1) Obtain the current time of day in 64-bit NTP format [NTP].

     2) Obtain an EUI-64 identifier from the system running this
        algorithm.  If an EUI-64 does not exist, one can be created from
        a 48-bit MAC address as specified in [ADDARCH].  If an EUI-64
        cannot be obtained or created, a suitably unique identifier,
        local to the node, should be used (e.g., system serial number).

localaddr=`ip -o -6 addr show dev ge00 scope link | awk '{print $4}' | cut 
-f1 -d/`

fe80::c63d:c7ff:fea3:767a

     3) Concatenate the time of day with the system-specific identifier
        in order to create a key.

The rfc doesn't specify case, or binary, or ascii, or what.

     4) Compute an SHA-1 digest on the key as specified in [FIPS, SHA1];
        the resulting value is 160 bits.

echo asdf | openssl dgst -sha1 returns

(stdin)= 7d97e98f8af710c7e7fe703abc8f639e0ee507c4

so the output needs to be split and trimmed

openssl dgst -sha1 /tmp/t | cut -f2 -d" "

     5) Use the least significant 40 bits as the Global ID.

     6) Concatenate FC00::/7, the L bit set to 1, and the 40-bit Global
        ID to create a Local IPv6 address prefix.

FDXX:XXXX:XXXX::/48

     7) Update DNS to suit

* Anycast

It makes sense to use anycast addressing for dns.

* Rules

PREFIX=

ip rule from fc::/7 to fc::/7 

ip rule ! from fc::/7

* Other ip address ranges

* DNS mirroring

* It would be nice if we used multiple tables right

static
dhcp
babel
etc

* Policy Routing is required
** Tables are numbered and have no aliases
   Grump
** Basic rules

ip rule add from fc::/7 to fc::/7
ip rule add from 2002::/16 to 2002::/16
ip rule add from ::/0 to fe80::/10
** Block example addresses entirely
ip rule add 

* Special rules

2001:2::/48 BMWG
2001:10::/28 ORCHID
2001:db8::/32

2001::/32 TEREDO

* Then there's deprecated addresses

fec0::/10 site-local
0200::/7 NSAP

* And these were returned to the address pool but should probably be blocked anyway
ip rule add from 3ffe::/16 to ::/0
   disallow
and 5F00::/8 as well

::/96 ipv4_mapped

* Then there's multicast...

* Then we have the default rules that need to be generated on a per router basis, depending on the
Kind of router it is.

case defgw_type in
     real) ip route ::/0 via 
     6to4)
     6in4)
     rfc)
     none)
esac

* So to capture all that, somehow, we don't have 
Ipset support for ipv6, so we need separate rules...

ip6tables -A BLOCK -i 

* And we need our routing protocol to not ship them around either

TBD

* And then, there's also hipl

    iptables -A INPUT -p 139 -j ACCEPT
    iptables -A OUTPUT -p 139 -j ACCEPT
    iptables -A INPUT -p udp --sport 10500 -j ACCEPT
    iptables -A OUTPUT -p udp --dport 10500 -j ACCEPT
    iptables -A INPUT -p 50 -j ACCEPT
    iptables -A OUTPUT -p 50 -j ACCEPT
    iptables -A INPUT -p 58 -j ACCEPT
    iptables -A OUTPUT -p 58 -j ACCEPT
    iptables -A INPUT -s 1.0.0.0/8 -d 1.0.0.0/8 -j ACCEPT
    iptables -A OUTPUT -s -s 1.0.0.0/8 -d -s 1.0.0.0/8 -j ACCEPT
    ip6tables -A INPUT -s 2001:0010::/28 -d 2001:0010::/28 -j ACCEPT
    ip6tables -A OUTPUT -s 2001:0010::/28 -d 2001:0010::/28 -j ACCEPT

* And THEN there is matching on acks and stuff like that

Ip6tables -m ip6header --soft --header proto 7

Or maybe 

ip6tables --protocol tcp 

* And then there is 'recent'

* And allowing sctp would be good

* prototypes
** Blocking

-- reject with destination unreachable actually
-- but rate limit to below available bandwidth

ip6tables -A INPUT --source 2001:db8::/32 -j DROP

-- but it is better to have a chattier network 
internally

ip6tables -A INPUT --source 2001:db8::/32 -j REJECT --reject-with icmp-net-unreachable

Except that icmp-net-unreachable is not available, at least in the version of ip6tables that I have...

** Rate limiting

And if we're going to reject this stuff, we really
want to rate limit the results, too

** Qos Marking
ip6tables -A INPUT --protocol udp -m multiport --ports 53,123 -j CONNMARK --set-xmark 0x01

ip rule add from fc::/7 to fc::/7
ip rule add from 2002::/16 to 2002::/16
ip rule add from ::/0 to fe80::/10

** Block example addresses entirely
ip rule add 

* Special rules

2001:2::/48 BMWG
2001:10::/28 ORCHID
2001:db8::/32

2001::/32 TEREDO
