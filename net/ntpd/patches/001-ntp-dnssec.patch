--- a/config.h.in
+++ b/config.h.in
@@ -365,6 +365,9 @@
 /* Use Rendezvous/DNS-SD registration */
 #undef HAVE_DNSREGISTRATION
 
+/* Perform local DNSSEC Validation using dnsval */
+#undef HAVE_DNSVAL
+
 /* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */
 #undef HAVE_DOPRNT
 
@@ -1516,6 +1519,28 @@ typedef unsigned int	uintptr_t;
 /* Must we have a CTTY for fsetown? */
 #undef USE_FSETOWNCTTY
 
+/* Enable extensions on AIX 3, Interix.  */
+#ifndef _ALL_SOURCE
+# undef _ALL_SOURCE
+#endif
+/* Enable GNU extensions on systems that have them.  */
+#ifndef _GNU_SOURCE
+# undef _GNU_SOURCE
+#endif
+/* Enable threading extensions on Solaris.  */
+#ifndef _POSIX_PTHREAD_SEMANTICS
+# undef _POSIX_PTHREAD_SEMANTICS
+#endif
+/* Enable extensions on HP NonStop.  */
+#ifndef _TANDEM_SOURCE
+# undef _TANDEM_SOURCE
+#endif
+/* Enable general extensions on Solaris.  */
+#ifndef __EXTENSIONS__
+# undef __EXTENSIONS__
+#endif
+
+
 /* Can we use SIGPOLL for tty IO? */
 #undef USE_TTY_SIGPOLL
 
@@ -1568,9 +1593,6 @@ typedef unsigned int	uintptr_t;
 /* enable thread safety */
 #undef _THREAD_SAFE
 
-/* Define to 500 only on HP-UX. */
-#undef _XOPEN_SOURCE
-
 /* Are we _special_? */
 #undef __APPLE_USE_RFC_3542
 
@@ -1579,28 +1601,6 @@ typedef unsigned int	uintptr_t;
 # undef __CHAR_UNSIGNED__
 #endif
 
-/* Enable extensions on AIX 3, Interix.  */
-#ifndef _ALL_SOURCE
-# undef _ALL_SOURCE
-#endif
-/* Enable GNU extensions on systems that have them.  */
-#ifndef _GNU_SOURCE
-# undef _GNU_SOURCE
-#endif
-/* Enable threading extensions on Solaris.  */
-#ifndef _POSIX_PTHREAD_SEMANTICS
-# undef _POSIX_PTHREAD_SEMANTICS
-#endif
-/* Enable extensions on HP NonStop.  */
-#ifndef _TANDEM_SOURCE
-# undef _TANDEM_SOURCE
-#endif
-/* Enable general extensions on Solaris.  */
-#ifndef __EXTENSIONS__
-# undef __EXTENSIONS__
-#endif
-
-
 /* deviant */
 #undef adjtimex
 
--- a/configure.ac
+++ b/configure.ac
@@ -208,6 +208,28 @@ case "$host" in
     ;;
 esac
 
+dnl 
+dnl Check for DNSSEC support
+dnl
+AC_ARG_WITH(
+	[dnsval],
+	AS_HELP_STRING([--with-dnsval], [- Enable local DNSSEC validation using dnsval]),
+	want_dnssec=$withval, 
+	want_dnssec=no)
+case "$want_dnssec" in
+ yes)
+    if test "x$ac_cv_header_pthread_h" != xyes; then
+		AC_MSG_ERROR(["Configured needs to be fine-tuned for non-pthread support"])
+	fi
+	AC_CHECK_LIB([val-threads], 
+				 [val_getaddrinfo],
+				 [LIBS="-lval-threads -lsres -lcrypto $LIBS"
+                  AC_DEFINE([HAVE_DNSVAL], [1], [Perform local DNSSEC Validation using dnsval])],
+				 [AC_MSG_ERROR(["Can't find required libraries for DNSSEC support"])], 
+				 [-lsres -lcrypto])
+	;;
+esac
+
 AC_CHECK_HEADERS([bstring.h])
 AC_CHECK_HEADER(
     [dns_sd.h],
--- a/include/ntp_intres.h
+++ b/include/ntp_intres.h
@@ -19,6 +19,14 @@ typedef void	(*gai_sometime_callback)
 extern int	getaddrinfo_sometime(const char *, const char *,
 				     const struct addrinfo *, int,
 				     gai_sometime_callback, void *);
+#ifdef HAVE_DNSVAL
+extern int	getaddrinfo_sometime_blocking(const char *, const char *,
+				     const struct addrinfo *, int,
+				     gai_sometime_callback, void *);
+extern int	getaddrinfo_sometime_nonblocking(const char *, const char *,
+				     const struct addrinfo *, int,
+				     gai_sometime_callback, void *);
+#endif
 /*
  * In gai_sometime_callback routines, the resulting addrinfo list is
  * only available until the callback returns.  To hold on to the list
--- a/include/ntpd.h
+++ b/include/ntpd.h
@@ -569,4 +569,3 @@ extern int accept_wildcard_if_for_winnt;
 extern struct refclock * const refclock_conf[];
 extern u_char	num_refclock_conf;
 #endif
-
--- a/libntp/decodenetnum.c
+++ b/libntp/decodenetnum.c
@@ -11,6 +11,10 @@
 #include <netinet/in.h>
 #endif
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntp.h"
 #include "ntp_stdlib.h"
 #include "ntp_assert.h"
@@ -34,6 +38,9 @@ decodenetnum(
 	char *pp;
 	char *np;
 	char name[80];
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	NTP_REQUIRE(num != NULL);
 	NTP_REQUIRE(strlen(num) < sizeof(name));
@@ -69,9 +76,21 @@ decodenetnum(
 	}
 	ZERO(hints);
 	hints.ai_flags = Z_AI_NUMERICHOST;
+#ifdef HAVE_DNSVAL
+	err = val_getaddrinfo(NULL, cp, "ntp", &hints, &ai, &val_status);
+#else
 	err = getaddrinfo(cp, "ntp", &hints, &ai);
+#endif
 	if (err != 0)
 		return 0;
+#ifdef HAVE_DNSVAL
+    if (val_istrusted(val_status)) {
+        if (ai) {
+            freeaddrinfo(ai);
+        }
+        return 0;
+    }
+#endif
 	NTP_INSIST(ai->ai_addrlen <= sizeof(*netnum));
 	ZERO(*netnum);
 	memcpy(netnum, ai->ai_addr, ai->ai_addrlen);
--- a/libntp/ntp_intres.c
+++ b/libntp/ntp_intres.c
@@ -92,6 +92,10 @@
 # endif
 #endif
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntp.h"
 #include "ntp_debug.h"
 #include "ntp_malloc.h"
@@ -186,6 +190,22 @@ typedef struct dnsworker_ctx_tag {
 #endif
 } dnsworker_ctx;
 
+#ifdef HAVE_DNSVAL
+/* callback data structure associated with the asynchronous
+ * lookup function provided by dnsval. The memory for this
+ * structure is allocated before the callback is invoked
+ * and freed in the callback routine
+ */ 
+struct dnsval_gai_data {
+	int retry;
+	const char *		node;
+	const char *		service;
+	const struct addrinfo *	hints;
+	gai_sometime_callback callback;
+	void * context;
+};
+#endif
+
 
 /* === variables === */
 dnschild_ctx **		dnschild_contexts;		/* parent */
@@ -224,9 +244,133 @@ static	void		getaddrinfo_sometime_comple
 static	void		getnameinfo_sometime_complete(blocking_work_req,
 						      void *, size_t,
 						      void *);
+#ifdef HAVE_DNSVAL
+static int 			dnsval_gai_callback(void *callback_data, 
+					          int, struct addrinfo *, 
+							  val_status_t); 
+#endif
 
 
 /* === functions === */
+
+#ifdef HAVE_DNSVAL
+int
+getaddrinfo_sometime(
+	const char *		node,
+	const char *		service,
+	const struct addrinfo *	hints,
+	int			retry,
+	gai_sometime_callback	callback,
+	void *			context
+	)
+{
+#ifdef HAVE_SIGNALED_IO
+    /*
+     * If we're using signaled IO, we won't be able to call select() on 
+     * dnsval's descriptors, so use the blocking version of the lookup routine
+     */
+    return getaddrinfo_sometime_blocking(node,service,hints,retry,callback,context);
+#else
+    return getaddrinfo_sometime_nonblocking(node,service,hints,retry,callback,context);
+#endif
+}
+
+/*
+ * Use the asynchronous lookup functionality from dnsval to resolve
+ * the name and perform DNSSEC validation of the response, and then
+ * invoke the provided callback completion function.
+ */
+int
+getaddrinfo_sometime_nonblocking(
+	const char *		node,
+	const char *		service,
+	const struct addrinfo *	hints,
+	int			retry,
+	gai_sometime_callback	callback,
+	void *			context
+	)
+{
+	int retval;
+	val_gai_callback dnsval_cb = &dnsval_gai_callback;
+	val_gai_status *status = NULL;
+
+	struct dnsval_gai_data *dnsval_cbdata = 
+			emalloc_zero(sizeof(struct dnsval_gai_data));
+	dnsval_cbdata->node = node;
+	dnsval_cbdata->service = service;
+	dnsval_cbdata->hints = hints;
+	dnsval_cbdata->retry = retry;
+	dnsval_cbdata->callback = callback;
+	dnsval_cbdata->context = context;
+
+	retval = val_getaddrinfo_submit(NULL, node, service, hints, 
+				dnsval_cb, dnsval_cbdata, 0, &status);
+	if (retval != VAL_NO_ERROR) {
+		msyslog(LOG_ERR, "unable to perform asynchronous getaddrinfo request using dnsval.");
+		errno = EFAULT;
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+dnsval_gai_callback(
+	void *dnsval_cbdata, 
+	int eai_retval, 
+	struct addrinfo *res,
+	val_status_t val_status)
+{
+	struct addrinfo *ai = NULL;
+    struct dnsval_gai_data *gd;
+
+	if (!dnsval_cbdata) {
+		return 1;
+	}
+    gd = (struct dnsval_gai_data *)dnsval_cbdata;
+
+	/* XXX Need to properly handle retries */
+
+	/* Extract the result only if DNSSEC validation was successful */
+	if (VAL_GETADDRINFO_HAS_STATUS(eai_retval)) {
+		if (val_istrusted(val_status)) {
+			ai = res;
+		} else {
+			msyslog(LOG_INFO,
+					"DNS response for %s failed validation", gd->node);
+		}
+	}
+
+	(gd->callback)(eai_retval, eai_retval,
+	                gd->context, 
+				    gd->node, 
+				    gd->service,
+				    gd->hints, 
+				    ai);
+
+	if (res) {
+		freeaddrinfo(res);
+	}
+
+	free(dnsval_cbdata);
+	return 0;
+}
+
+
+/*
+ * getaddrinfo_sometime_blocking - uses blocking child to call getaddrinfo then
+ *			  invokes provided callback completion function.
+ */
+int
+getaddrinfo_sometime_blocking(
+	const char *		node,
+	const char *		service,
+	const struct addrinfo *	hints,
+	int			retry,
+	gai_sometime_callback	callback,
+	void *			context
+	)
+#else
 /*
  * getaddrinfo_sometime - uses blocking child to call getaddrinfo then
  *			  invokes provided callback completion function.
@@ -240,6 +384,7 @@ getaddrinfo_sometime(
 	gai_sometime_callback	callback,
 	void *			context
 	)
+#endif
 {
 	blocking_gai_req *	gai_req;
 	u_int			idx;
@@ -319,6 +464,9 @@ blocking_getaddrinfo(
 	size_t			resp_octets;
 	char *			cp;
 	time_t			time_now;
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	gai_req = (void *)((char *)req + sizeof(*req));
 	node = (char *)gai_req + sizeof(*gai_req);
@@ -349,8 +497,22 @@ blocking_getaddrinfo(
 		fflush(stdout);
 #endif	
 	ai_res = NULL;
+#ifdef HAVE_DNSVAL
+	gai_resp->retcode = val_getaddrinfo(NULL, node, service, &gai_req->hints,
+					&ai_res, &val_status);
+    if (gai_resp->retcode == 0 && !val_istrusted(val_status)) {
+        if (ai_res) {
+            freeaddrinfo(ai_res);
+        }
+        gai_resp->retcode = EAI_FAIL;
+	    TRACE(2, ("DNSSEC validation failed for node %s serv %s fam %d flags %x\n", 
+		  node, service, gai_req->hints.ai_family,
+		  gai_req->hints.ai_flags));
+    }
+#else
 	gai_resp->retcode = getaddrinfo(node, service, &gai_req->hints,
 					&ai_res);
+#endif
 	gai_resp->retry = gai_req->retry;
 #ifdef EAI_SYSTEM
 	if (EAI_SYSTEM == gai_resp->retcode)
@@ -618,7 +780,6 @@ void gai_test_callback(int rescode, int
 }
 #endif	/* TEST_BLOCKING_WORKER */
 
-
 int
 getnameinfo_sometime(
 	sockaddr_u *		psau,
@@ -671,7 +832,6 @@ getnameinfo_sometime(
 	return 0;
 }
 
-
 int
 blocking_getnameinfo(
 	blocking_child *	c,
--- a/libntp/ntp_rfc2553.c
+++ b/libntp/ntp_rfc2553.c
@@ -76,6 +76,9 @@
 #ifdef HAVE_NETINET_IN_H
 #include <netinet/in.h>
 #endif
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
 #include "ntp_rfc2553.h"
 
 #include "ntpd.h"
@@ -268,7 +271,15 @@ DNSlookup_name(
 	struct hostent **Addresses
 )
 {
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+	*Addresses = val_gethostbyname(NULL, name, &val_status);
+    if (!val_istrusted(val_status)) {
+        return NO_RECOVERY;
+    }
+#else
 	*Addresses = gethostbyname(name);
+#endif
 	return (h_errno);
 }
 #endif
@@ -539,7 +550,6 @@ do_nodename(
 	/*
 	 * Look for a name
 	 */
-
 	errval = DNSlookup_name(nodename, AF_INET, &hp);
 
 	if (hp == NULL) {
--- a/libntp/numtohost.c
+++ b/libntp/numtohost.c
@@ -8,6 +8,10 @@
 #include <netinet/in.h>		/* ntohl */
 #endif
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntp_fp.h"
 #include "ntp_stdlib.h"
 #include "lib_strbuf.h"
@@ -23,6 +27,9 @@ numtohost(
 {
 	char *bp;
 	struct hostent *hp;
+#ifdef HAVE_DNSVAL
+	val_status_t val_status;
+#endif
 
 	/*
 	 * This is really gross, but saves lots of hanging looking for
@@ -30,10 +37,17 @@ numtohost(
 	 * addresses on the loopback network except for the loopback
 	 * host itself.
 	 */
+#ifdef HAVE_DNSVAL
+	if ((((ntohl(netnum) & LOOPBACKNETMASK) == LOOPBACKNET)
+	     && (ntohl(netnum) != LOOPBACKHOST))
+	    || ((hp = val_gethostbyaddr(NULL, (char *)&netnum, sizeof netnum, AF_INET, &val_status))
+		== 0) || !val_istrusted(val_status))
+#else
 	if ((((ntohl(netnum) & LOOPBACKNETMASK) == LOOPBACKNET)
 	     && (ntohl(netnum) != LOOPBACKHOST))
 	    || ((hp = gethostbyaddr((char *)&netnum, sizeof netnum, AF_INET))
 		== 0))
+#endif
 	    return numtoa(netnum);
 	
 	LIB_GETBUF(bp);
--- a/libntp/socktohost.c
+++ b/libntp/socktohost.c
@@ -14,6 +14,10 @@
 
 #include <stdio.h>
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntp_fp.h"
 #include "lib_strbuf.h"
 #include "ntp_stdlib.h"
@@ -36,13 +40,22 @@ socktohost(
 	sockaddr_u		addr;
 	size_t			octets;
 	int			a_info;
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	/* reverse the address to purported DNS name */
 	LIB_GETBUF(pbuf);
 	gni_flags = NI_DGRAM | NI_NAMEREQD;
+#ifdef HAVE_DNSVAL
+	if (val_getnameinfo(NULL, &sock->sa, SOCKLEN(sock), pbuf, LIB_BUFLENGTH,
+			NULL, 0, gni_flags, &val_status) || !val_istrusted(val_status))
+		return stoa(sock);	/* use address */
+#else
 	if (getnameinfo(&sock->sa, SOCKLEN(sock), pbuf, LIB_BUFLENGTH,
 			NULL, 0, gni_flags))
 		return stoa(sock);	/* use address */
+#endif
 
 	TRACE(1, ("%s reversed to %s\n", stoa(sock), pbuf));
 
@@ -57,7 +70,11 @@ socktohost(
 	hints.ai_flags = 0;
 	alist = NULL;
 
+#ifdef HAVE_DNSVAL
+	a_info = val_getaddrinfo(NULL, pbuf, svc, &hints, &alist, &val_status);
+#else
 	a_info = getaddrinfo(pbuf, svc, &hints, &alist);
+#endif
 	if (a_info == EAI_NONAME
 #ifdef EAI_NODATA
 	    || a_info == EAI_NODATA
@@ -67,18 +84,41 @@ socktohost(
 #ifdef AI_ADDRCONFIG
 		hints.ai_flags |= AI_ADDRCONFIG;
 #endif
-		a_info = getaddrinfo(pbuf, svc, &hints, &alist);	
+#ifdef HAVE_DNSVAL
+		if (alist) {
+			freeaddrinfo(alist);
+		}
+		a_info = val_getaddrinfo(NULL, pbuf, svc, &hints, &alist, &val_status);
+#else
+		a_info = getaddrinfo(pbuf, svc, &hints, &alist);
+#endif
 	}
 #ifdef AI_ADDRCONFIG
 	/* Some older implementations don't like AI_ADDRCONFIG. */
 	if (a_info == EAI_BADFLAGS) {
 		hints.ai_flags &= ~AI_ADDRCONFIG;
-		a_info = getaddrinfo(pbuf, svc, &hints, &alist);	
+#ifdef HAVE_DNSVAL
+		if (alist) {
+			freeaddrinfo(alist);
+		}
+		a_info = val_getaddrinfo(NULL, pbuf, svc, &hints, &alist, &val_status);
+#else
+		a_info = getaddrinfo(pbuf, svc, &hints, &alist);
+#endif
 	}
 #endif
 	if (a_info)
 		goto forward_fail;
 
+#ifdef HAVE_DNSVAL
+	if (!val_istrusted(val_status)) {
+        if (alist) {
+            freeaddrinfo(alist);
+        }
+		goto forward_fail;
+	}	
+#endif
+
 	NTP_INSIST(alist != NULL);
 
 	for (ai = alist; ai != NULL; ai = ai->ai_next) {
--- a/ntpd/cmd_args.c
+++ b/ntpd/cmd_args.c
@@ -5,6 +5,10 @@
 # include <config.h>
 #endif
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntpd.h"
 #include "ntp_stdlib.h"
 #include "ntp_config.h"
@@ -75,6 +79,16 @@ getCmdOpts(
 
 	if (HAVE_OPT( PANICGATE ))
 		allow_panic = TRUE;
+#ifdef HAVE_DNSVAL
+	if (HAVE_OPT( PANICGATE )) {
+        /* Disable DNSSEC Validation */
+		if (VAL_NO_ERROR != val_context_setqflags(NULL, VAL_CTX_FLAG_SET, VAL_QUERY_IGNORE_SKEW)) {
+		    msyslog(LOG_ERR, "Failed to create DNSSEC validator context.");
+		    exit(1);
+        }
+		msyslog(LOG_NOTICE, "DNSSEC clock-skew tolerance enabled.");
+    }
+#endif
 
 #ifdef HAVE_DROPROOT
 	if (HAVE_OPT( JAILDIR )) {
--- a/ntpd/ntp_config.c
+++ b/ntpd/ntp_config.c
@@ -36,6 +36,10 @@
 #include <isc/net.h>
 #include <isc/result.h>
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntp.h"
 #include "ntpd.h"
 #include "ntp_io.h"
@@ -1669,6 +1673,9 @@ get_next_address(
 	sockaddr_u *final_addr;
 	struct addrinfo *ptr;
 	int gai_err;
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	final_addr = emalloc(sizeof(*final_addr));
 
@@ -1677,15 +1684,34 @@ get_next_address(
 			 addr_prefix, curr_addr_num++);
 		printf("Selecting ip address %s for hostname %s\n",
 		       addr_string, addr->address);
+#ifdef HAVE_DNSVAL
+		gai_err = val_getaddrinfo(NULL, addr_string, "ntp", NULL, &ptr, &val_status);
+#else
 		gai_err = getaddrinfo(addr_string, "ntp", NULL, &ptr);
+#endif
 	} else {
+#ifdef HAVE_DNSVAL
+		gai_err = val_getaddrinfo(NULL, addr->address, "ntp", NULL, &ptr, &val_status);
+#else
 		gai_err = getaddrinfo(addr->address, "ntp", NULL, &ptr);
+#endif
 	}
 
 	if (gai_err) {
 		fprintf(stderr, "ERROR!! Could not get a new address\n");
 		exit(1);
 	}
+
+#ifdef HAVE_DNSVAL
+    if (!val_istrusted(val_status)) {
+		fprintf(stderr, "ERROR!! DNSSEC validation for address failed\n");
+		if (ptr) {
+			freeaddrinfo(ptr);
+		}
+		exit(1);
+    }
+#endif
+
 	memcpy(final_addr, ptr->ai_addr, ptr->ai_addrlen);
 	fprintf(stderr, "Successful in setting ip address of simulated server to: %s\n",
 		stoa(final_addr));
@@ -2260,6 +2286,9 @@ config_access(
 #else
 	    "mssntp restrict bit ignored, this ntpd was configured without --enable-ntp-signd.";
 #endif
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	/* Configure the mru options */
 	my_opt = HEAD_PFIFO(ptree->mru_opts);
@@ -2502,16 +2531,36 @@ config_access(
 				hints.ai_protocol = IPPROTO_UDP;
 				hints.ai_socktype = SOCK_DGRAM;
 				hints.ai_family = my_node->addr->type;
+
+#ifdef HAVE_DNSVAL
+				rc = val_getaddrinfo(NULL, my_node->addr->address,
+						 "ntp", &hints,
+						 &ai_list, &val_status);
+#else
 				rc = getaddrinfo(my_node->addr->address,
 						 "ntp", &hints,
 						 &ai_list);
-				if (rc) {
+#endif
+
+                if (rc) {
 					msyslog(LOG_ERR,
 						"restrict: ignoring line %d, address/host '%s' unusable.",
 						my_node->line_no,
 						my_node->addr->address);
 					continue;
 				}
+#ifdef HAVE_DNSVAL
+				if (!val_istrusted(val_status)) {
+					msyslog(LOG_ERR,
+						"restrict: ignoring line %d, address/host '%s' could not be validated.",
+						my_node->line_no,
+						my_node->addr->address);
+                    if (ai_list) {
+                        freeaddrinfo(ai_list);
+                    }
+					continue;
+				}
+#endif
 				NTP_INSIST(ai_list != NULL);
 				pai = ai_list;
 				NTP_INSIST(pai->ai_addr != NULL);
--- a/ntpd/ntp_loopfilter.c
+++ b/ntpd/ntp_loopfilter.c
@@ -8,6 +8,10 @@
 # include <config.h>
 #endif
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntpd.h"
 #include "ntp_io.h"
 #include "ntp_unixtime.h"
@@ -136,6 +140,7 @@ static	void	start_kern_loop(void);
 static	void	stop_kern_loop(void);
 #endif /* KERNEL_PLL */
 
+
 /*
  * Clock state machine control flags
  */
@@ -178,6 +183,7 @@ static sigjmp_buf env;		/* environment v
 #endif /* SIGSYS */
 #endif /* KERNEL_PLL */
 
+
 /*
  * init_loopfilter - initialize loop filter data
  */
@@ -445,6 +451,19 @@ local_clock(
 		 * startup until the initial transient has subsided.
 		 */
 		default:
+#ifdef HAVE_DNSVAL
+		    if (allow_panic) {
+                /* Enable DNSSEC Validation */
+                if (VAL_NO_ERROR != val_context_setqflags(NULL, VAL_CTX_FLAG_RESET, VAL_QUERY_IGNORE_SKEW)) {
+                    /* something didn't work right, log and keep trying */
+		            msyslog(LOG_NOTICE, "DNSSEC clock-skew tolerance could not be disabled. Panic correction still in effect.");
+                } else {
+		            msyslog(LOG_NOTICE, "DNSSEC clock-skew tolerance disabled.");
+			        allow_panic = FALSE;
+                }
+            } 
+            else /* fall-through */
+#endif
 			allow_panic = FALSE;
 			if (freq_cnt == 0) {
 
--- a/ntpd/ntpd.c
+++ b/ntpd/ntpd.c
@@ -988,6 +988,9 @@ getgroup:
 #  ifndef HAVE_SIGNALED_IO
 			rdfdes = activefds;
 #   if !defined(VMS) && !defined(SYS_VXWORKS)
+#     ifdef HAVE_DNSVAL
+            val_async_select_info(NULL, &rdfdes, &maxactivefd, NULL);
+#     endif
 			nfound = select(maxactivefd + 1, &rdfdes, NULL,
 					NULL, NULL);
 #   else	/* VMS, VxWorks */
@@ -997,11 +1000,18 @@ getgroup:
 
 				t1.tv_sec = 1;
 				t1.tv_usec = 0;
+#     ifdef HAVE_DNSVAL
+                val_async_select_info(NULL, &rdfdes, &maxactivefd, &t1);
+#     endif
 				nfound = select(maxactivefd + 1,
 						&rdfdes, NULL, NULL,
 						&t1);
 			}
 #   endif	/* VMS, VxWorks */
+
+#  ifdef HAVE_DNSVAL
+            val_async_check_wait(NULL, &rdfdes, &maxactivefd, NULL, 0);
+#  endif
 			if (nfound > 0) {
 				l_fp ts;
 
@@ -1019,7 +1029,6 @@ getgroup:
 			}
 #   endif /* DEBUG */
 #  else /* HAVE_SIGNALED_IO */
-
 			wait_for_signal();
 #  endif /* HAVE_SIGNALED_IO */
 			if (alarm_flag) {	/* alarmed? */
--- a/ntpd/refclock_nmea.c
+++ b/ntpd/refclock_nmea.c
@@ -30,6 +30,10 @@
 #include <stdio.h>
 #include <ctype.h>
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntpd.h"
 #include "ntp_io.h"
 #include "ntp_unixtime.h"
@@ -1717,6 +1721,9 @@ nmead_open(
 	struct addrinfo	 ai_hint;	/* resolution hint	*/
 	struct addrinfo	*ai_list;	/* resolution result	*/
 	struct addrinfo *ai;		/* result scan ptr	*/
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	fd = -1;
 	
@@ -1743,8 +1750,21 @@ nmead_open(
 	ZERO(ai_hint);
 	ai_hint.ai_protocol = IPPROTO_TCP;
 	ai_hint.ai_socktype = SOCK_STREAM;
+
+#ifdef HAVE_DNSVAL
+	if (val_getaddrinfo(NULL, host, port, &ai_hint, &ai_list, &val_status))
+		return fd;
+
+	if (!val_istrusted(val_status)) {
+		if (ai_list) {
+			freeaddrinfo(ai_list);
+		}
+		return fd;
+    }
+#else
 	if (getaddrinfo(host, port, &ai_hint, &ai_list))
 		return fd;
+#endif
 	
 	for (ai = ai_list; ai && (fd == -1); ai = ai->ai_next) {
 		sh = socket(ai->ai_family, ai->ai_socktype,
--- a/ntpdate/ntpdate.c
+++ b/ntpdate/ntpdate.c
@@ -48,6 +48,10 @@
 
 #include <arpa/inet.h>
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #ifdef SYS_VXWORKS
 # include "ioLib.h"
 # include "sockLib.h"
@@ -1351,6 +1355,9 @@ addserver(
 	/* Service name */
 	char service[5];
 	sockaddr_u addr;
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	strlcpy(service, "ntp", sizeof(service));
 
@@ -1364,8 +1371,13 @@ addserver(
 		printf("Looking for host %s and service %s\n", serv, service);
 #endif
 
+#ifdef HAVE_DNSVAL
+	error = val_getaddrinfo(NULL, serv, service, &hints, &addrResult, &val_status);
+	if (error != 0 || !val_istrusted(val_status)) {
+#else
 	error = getaddrinfo(serv, service, &hints, &addrResult);
 	if (error != 0) {
+#endif
 		/* Conduct more refined error analysis */
 		if (error == EAI_FAIL || error == EAI_AGAIN){
 			/* Name server is unusable. Exit after failing on the
@@ -1679,6 +1691,9 @@ init_io(void)
 	int rc;
 	int optval = 1;
 	int check_ntp_port_in_use = !debug && !simple_query && !unpriv_port;
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	/*
 	 * Init buffer free list and stat counters
@@ -1699,7 +1714,15 @@ init_io(void)
 	hints.ai_flags = AI_PASSIVE;
 	hints.ai_socktype = SOCK_DGRAM;
 
+#ifdef HAVE_DNSVAL
+	if (val_getaddrinfo(NULL, NULL, service, &hints, &res, &val_status) != 0 ||
+        !val_istrusted(val_status)) {
+        if (res) {
+            freeaddrinfo(res);
+        }
+#else
 	if (getaddrinfo(NULL, service, &hints, &res) != 0) {
+#endif
 		msyslog(LOG_ERR, "getaddrinfo() failed: %m");
 		exit(1);
 		/*NOTREACHED*/
--- a/ntpdc/ntpdc.c
+++ b/ntpdc/ntpdc.c
@@ -19,6 +19,10 @@
 #include <isc/net.h>
 #include <isc/result.h>
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntpdc.h"
 #include "ntp_select.h"
 #include "ntp_stdlib.h"
@@ -397,6 +401,9 @@ openhost(
 	register const char *cp;
 	char name[LENHOSTNAME];
 	char service[5];
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	/*
 	 * We need to get by the [] if they were entered 
@@ -430,7 +437,11 @@ openhost(
 	hints.ai_socktype = SOCK_DGRAM;
 	hints.ai_flags = Z_AI_NUMERICHOST;
 
+#ifdef HAVE_DNSVAL
+	a_info = val_getaddrinfo(NULL, hname, service, &hints, &ai, &val_status);
+#else
 	a_info = getaddrinfo(hname, service, &hints, &ai);
+#endif
 	if (a_info == EAI_NONAME
 #ifdef EAI_NODATA
 	    || a_info == EAI_NODATA
@@ -440,12 +451,26 @@ openhost(
 #ifdef AI_ADDRCONFIG
 		hints.ai_flags |= AI_ADDRCONFIG;
 #endif
+#ifdef HAVE_DNSVAL
+        if (ai) {
+            freeaddrinfo(ai);
+        }
+        a_info = val_getaddrinfo(NULL, hname, service, &hints, &ai, &val_status);
+#else
 		a_info = getaddrinfo(hname, service, &hints, &ai);	
+#endif
 	}
 	/* Some older implementations don't like AI_ADDRCONFIG. */
 	if (a_info == EAI_BADFLAGS) {
 		hints.ai_flags = AI_CANONNAME;
+#ifdef HAVE_DNSVAL
+        if (ai) {
+            freeaddrinfo(ai);
+        }
+        a_info = val_getaddrinfo(NULL, hname, service, &hints, &ai, &val_status);
+#else
 		a_info = getaddrinfo(hname, service, &hints, &ai);	
+#endif
 	}
 	if (a_info != 0) {
 		fprintf(stderr, "%s\n", gai_strerror(a_info));
@@ -454,6 +479,15 @@ openhost(
 		return 0;
 	}
 
+#ifdef HAVE_DNSVAL
+    if (!val_istrusted(val_status)) {
+        if (ai) {
+            freeaddrinfo(ai);
+        }
+		return 0;
+    }  
+#endif
+
 	/* 
 	 * getaddrinfo() has returned without error so ai should not 
 	 * be NULL.
@@ -1424,6 +1458,9 @@ getnetnum(
 	)
 {
 	struct addrinfo hints, *ai = NULL;
+#ifdef HAVE_DNSVAL
+	val_status_t val_status;
+#endif
 
 	ZERO(hints);
 	hints.ai_flags = AI_CANONNAME;
@@ -1437,10 +1474,20 @@ getnetnum(
 	 */
 	if (decodenetnum(hname, num)) {
 		if (fullhost != NULL)
+#ifdef HAVE_DNSVAL
+			val_getnameinfo(NULL, &num->sa, SOCKLEN(num), fullhost,
+				    LENHOSTNAME, NULL, 0, 0, &val_status);
+#else
 			getnameinfo(&num->sa, SOCKLEN(num), fullhost,
 				    LENHOSTNAME, NULL, 0, 0);
+#endif
 		return 1;
+#ifdef HAVE_DNSVAL
+	} else if (val_getaddrinfo(NULL, hname, "ntp", &hints, &ai, &val_status) == 0 && 
+			   val_istrusted(val_status)) {
+#else
 	} else if (getaddrinfo(hname, "ntp", &hints, &ai) == 0) {
+#endif
 		NTP_INSIST(sizeof(*num) >= ai->ai_addrlen);
 		memcpy(num, ai->ai_addr, ai->ai_addrlen);
 		if (fullhost != NULL) {
@@ -1448,12 +1495,31 @@ getnetnum(
 				strlcpy(fullhost, ai->ai_canonname,
 					LENHOSTNAME);
 			else
+#ifdef HAVE_DNSVAL
+				if (0 == val_getnameinfo(NULL, &num->sa, SOCKLEN(num),
+					    	fullhost, LENHOSTNAME, NULL,
+					    	0, 0, &val_status) && !val_istrusted(val_status)) {
+					memset(&num->sa, 0, sizeof(num->sa)); 
+				}
+#else
 				getnameinfo(&num->sa, SOCKLEN(num),
 					    fullhost, LENHOSTNAME, NULL,
 					    0, 0);
+#endif
+		}
+#ifdef HAVE_DNSVAL
+		if (ai) {
+			freeaddrinfo(ai);
 		}
+		
+#endif
 		return 1;
 	}
+#ifdef HAVE_DNSVAL
+	if (ai) {
+		freeaddrinfo(ai);
+	}
+#endif
 	fprintf(stderr, "***Can't find host %s\n", hname);
 
 	return 0;
--- a/ntpq/ntpq.c
+++ b/ntpq/ntpq.c
@@ -20,6 +20,10 @@
 #include <isc/net.h>
 #include <isc/result.h>
 
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
+
 #include "ntpq.h"
 #include "ntp_stdlib.h"
 #include "ntp_unixtime.h"
@@ -554,6 +558,9 @@ openhost(
 	size_t octets;
 	register const char *cp;
 	char name[LENHOSTNAME];
+#ifdef HAVE_DNSVAL
+	val_status_t val_status;
+#endif
 
 	/*
 	 * We need to get by the [] if they were entered
@@ -587,7 +594,11 @@ openhost(
 	hints.ai_flags = Z_AI_NUMERICHOST;
 	ai = NULL;
 
+#ifdef HAVE_DNSVAL
+	a_info = val_getaddrinfo(NULL, hname, svc, &hints, &ai, &val_status);
+#else
 	a_info = getaddrinfo(hname, svc, &hints, &ai);
+#endif
 	if (a_info == EAI_NONAME
 #ifdef EAI_NODATA
 	    || a_info == EAI_NODATA
@@ -597,19 +608,42 @@ openhost(
 #ifdef AI_ADDRCONFIG
 		hints.ai_flags |= AI_ADDRCONFIG;
 #endif
+#ifdef HAVE_DNSVAL
+		if (ai) {
+			freeaddrinfo(ai);
+		}
+		a_info = val_getaddrinfo(NULL, hname, svc, &hints, &ai, &val_status);
+#else
 		a_info = getaddrinfo(hname, svc, &hints, &ai);
+#endif
 	}
 #ifdef AI_ADDRCONFIG
 	/* Some older implementations don't like AI_ADDRCONFIG. */
 	if (a_info == EAI_BADFLAGS) {
 		hints.ai_flags &= ~AI_ADDRCONFIG;
+#ifdef HAVE_DNSVAL
+		if (ai) {
+			freeaddrinfo(ai);
+		}
+		a_info = val_getaddrinfo(NULL, hname, svc, &hints, &ai, &val_status);
+#else
 		a_info = getaddrinfo(hname, svc, &hints, &ai);
+#endif
 	}
 #endif
 	if (a_info != 0) {
 		fprintf(stderr, "%s\n", gai_strerror(a_info));
 		return 0;
 	}
+#ifdef HAVE_DNSVAL
+	if (!val_istrusted(val_status)) {
+		if (ai) {
+			freeaddrinfo(ai);
+		}
+		fprintf(stderr, "%s\n", "DNSSEC Validation failed.");
+		return 0;
+	}  
+#endif
 
 	INSIST(ai != NULL);
 	ZERO(addr);
@@ -1752,6 +1786,9 @@ getnetnum(
 	)
 {
 	struct addrinfo hints, *ai = NULL;
+#ifdef HAVE_DNSVAL
+    val_status_t val_status;
+#endif
 
 	ZERO(hints);
 	hints.ai_flags = AI_CANONNAME;
@@ -1765,10 +1802,20 @@ getnetnum(
 	 */
 	if (decodenetnum(hname, num)) {
 		if (fullhost != NULL)
+#ifdef HAVE_DNSVAL
+			val_getnameinfo(NULL, &num->sa, SOCKLEN(num), fullhost,
+				    LENHOSTNAME, NULL, 0, 0, &val_status);
+#else
 			getnameinfo(&num->sa, SOCKLEN(num), fullhost,
 				    LENHOSTNAME, NULL, 0, 0);
+#endif
 		return 1;
+#ifdef HAVE_DNSVAL
+	} else if (val_getaddrinfo(NULL, hname, "ntp", &hints, &ai, &val_status) == 0 && 
+               val_istrusted(val_status)) {
+#else
 	} else if (getaddrinfo(hname, "ntp", &hints, &ai) == 0) {
+#endif
 		INSIST(sizeof(*num) >= ai->ai_addrlen);
 		memcpy(num, ai->ai_addr, ai->ai_addrlen);
 		if (fullhost != NULL) {
@@ -1776,13 +1823,24 @@ getnetnum(
 				strlcpy(fullhost, ai->ai_canonname,
 					LENHOSTNAME);
 			else
+#ifdef HAVE_DNSVAL
+				val_getnameinfo(NULL, &num->sa, SOCKLEN(num),
+					    fullhost, LENHOSTNAME, NULL,
+					    0, 0, &val_status);
+#else
 				getnameinfo(&num->sa, SOCKLEN(num),
 					    fullhost, LENHOSTNAME, NULL,
 					    0, 0);
+#endif
 		}
 		freeaddrinfo(ai);
 		return 1;
 	}
+#ifdef HAVE_DNSVAL
+    if (ai) {
+        freeaddrinfo(ai);
+    }
+#endif
 	fprintf(stderr, "***Can't find host %s\n", hname);
 
 	return 0;
--- a/sntp/config.h.in
+++ b/sntp/config.h.in
@@ -77,6 +77,9 @@
 /* Define to 1 if you have the <dlfcn.h> header file. */
 #undef HAVE_DLFCN_H
 
+/* Perform local DNSSEC Validation using dnsval */
+#undef HAVE_DNSVAL
+
 /* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */
 #undef HAVE_DOPRNT
 
@@ -811,6 +814,28 @@ typedef unsigned int	uintptr_t;
 /* What type to use for setsockopt */
 #undef TYPEOF_IP_MULTICAST_LOOP
 
+/* Enable extensions on AIX 3, Interix.  */
+#ifndef _ALL_SOURCE
+# undef _ALL_SOURCE
+#endif
+/* Enable GNU extensions on systems that have them.  */
+#ifndef _GNU_SOURCE
+# undef _GNU_SOURCE
+#endif
+/* Enable threading extensions on Solaris.  */
+#ifndef _POSIX_PTHREAD_SEMANTICS
+# undef _POSIX_PTHREAD_SEMANTICS
+#endif
+/* Enable extensions on HP NonStop.  */
+#ifndef _TANDEM_SOURCE
+# undef _TANDEM_SOURCE
+#endif
+/* Enable general extensions on Solaris.  */
+#ifndef __EXTENSIONS__
+# undef __EXTENSIONS__
+#endif
+
+
 /* Can we use SIGPOLL for tty IO? */
 #undef USE_TTY_SIGPOLL
 
@@ -863,9 +888,6 @@ typedef unsigned int	uintptr_t;
 /* enable thread safety */
 #undef _THREAD_SAFE
 
-/* Define to 500 only on HP-UX. */
-#undef _XOPEN_SOURCE
-
 /* Are we _special_? */
 #undef __APPLE_USE_RFC_3542
 
@@ -874,28 +896,6 @@ typedef unsigned int	uintptr_t;
 # undef __CHAR_UNSIGNED__
 #endif
 
-/* Enable extensions on AIX 3, Interix.  */
-#ifndef _ALL_SOURCE
-# undef _ALL_SOURCE
-#endif
-/* Enable GNU extensions on systems that have them.  */
-#ifndef _GNU_SOURCE
-# undef _GNU_SOURCE
-#endif
-/* Enable threading extensions on Solaris.  */
-#ifndef _POSIX_PTHREAD_SEMANTICS
-# undef _POSIX_PTHREAD_SEMANTICS
-#endif
-/* Enable extensions on HP NonStop.  */
-#ifndef _TANDEM_SOURCE
-# undef _TANDEM_SOURCE
-#endif
-/* Enable general extensions on Solaris.  */
-#ifndef __EXTENSIONS__
-# undef __EXTENSIONS__
-#endif
-
-
 /* Define to empty if `const' does not conform to ANSI C. */
 #undef const
 
--- a/sntp/configure.ac
+++ b/sntp/configure.ac
@@ -108,6 +108,28 @@ dnl NTP_LIBNTP checks for inet_XtoY
 dnl AC_SEARCH_LIBS([inet_pton], [nsl])
 AC_SEARCH_LIBS([openlog], [gen syslog])
 
+dnl 
+dnl Check for DNSSEC support
+dnl
+AC_ARG_WITH(
+	[dnsval],
+	AS_HELP_STRING([--with-dnsval], [- Enable local DNSSEC validation using dnsval]),
+	want_dnssec=$withval, 
+	want_dnssec=no)
+case "$want_dnssec" in
+ yes)
+    if test "x$ac_cv_header_pthread_h" != xyes; then
+		AC_MSG_ERROR(["Configured needs to be fine-tuned for non-pthread support"])
+	fi
+	AC_CHECK_LIB([val-threads], 
+				 [val_getaddrinfo],
+				 [LIBS="-lval-threads -lsres -lcrypto $LIBS"
+                  AC_DEFINE([HAVE_DNSVAL], [1], [Perform local DNSSEC Validation using dnsval])],
+				 [AC_MSG_ERROR(["Can't find required libraries for DNSSEC support"])], 
+				 [-lsres -lcrypto])
+	;;
+esac
+
 # Checks for header files.
 AC_CHECK_HEADERS([netdb.h string.h strings.h syslog.h])
 NTP_SYSEXITS_H
--- a/sntp/main.c
+++ b/sntp/main.c
@@ -7,6 +7,9 @@
 #ifdef WORK_THREAD
 # include <event2/thread.h>
 #endif
+#ifdef HAVE_DNSVAL
+#include <validator/validator.h>
+#endif
 
 #include "main.h"
 #include "ntp_libopts.h"
@@ -272,6 +275,29 @@ sntp_main (
 	for (i = 0; i < argc; ++i)
 		handle_lookup(argv[i], CTX_UCST);
 
+/* 
+ * If we used getaddrinfo_sometime() [non-blocking] instead of 
+ * getaddrinfo_sometime_blocking() to issue the queries then the following 
+ * code block would need to be uncommented. The issue with using the 
+ * non-blocking lookup routine is that it cannot be used effectively in 
+ * conjunction with libevent. That is, we'd need to wait for all DNS lookups 
+ * to complete before we are able to send NTP packets out.
+ * The better approach would be to instrument libevent to use dnsval's 
+ * async validation routines internally.
+ */ 
+#if 0
+#if HAVE_DNSVAL
+    do {
+        fd_set fds;
+        int numfds;
+
+        FD_ZERO(&fds);       /* clear fd_set */
+        numfds = 0;            /* no FDs yet */
+        val_async_select(NULL, &fds, &numfds, NULL, 0);
+        val_async_check_wait(NULL, &fds, &numfds, NULL, 0);
+    } while (n_pending_dns > 0);
+#endif
+#endif
 	gettimeofday_cached(base, &start_tv);
 	event_base_dispatch(base);
 	event_base_free(base);
@@ -421,8 +447,22 @@ handle_lookup(
 	}
 
 	++n_pending_dns;
+#ifdef HAVE_DNSVAL
+    /*
+     * It is possible to use getaddrinfo_sometime() [non-blocking] in 
+     * place of getaddrinfo_sometime_blocking() too.
+     * If we did so, we'd have to manage the descriptors
+     * associated with the DNS lookup within sntp itself.
+     * But this approach is sub-optimal when used in 
+     * conjunction with libevent. 
+     * Also See the ifdef 0 block in sntp_main().
+     */ 
+	getaddrinfo_sometime_blocking(name, "123", &hints, 0,
+			     &sntp_name_resolved, ctx);
+#else
 	getaddrinfo_sometime(name, "123", &hints, 0,
 			     &sntp_name_resolved, ctx);
+#endif
 }
 
 
